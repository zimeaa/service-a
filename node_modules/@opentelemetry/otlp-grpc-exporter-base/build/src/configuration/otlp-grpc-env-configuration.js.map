{"version":3,"file":"otlp-grpc-env-configuration.js","sourceRoot":"","sources":["../../../src/configuration/otlp-grpc-env-configuration.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { UnresolvedOtlpGrpcConfiguration } from './otlp-grpc-configuration';\nimport type { ChannelCredentials, Metadata } from '@grpc/grpc-js';\nimport { parseKeyPairsIntoRecord } from '@opentelemetry/core';\nimport {\n  createEmptyMetadata,\n  createInsecureCredentials,\n  createSslCredentials,\n} from '../grpc-exporter-transport';\nimport { getSharedConfigurationFromEnvironment } from '@opentelemetry/otlp-exporter-base/node-http';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport { diag } from '@opentelemetry/api';\n\nfunction fallbackIfNullishOrBlank(\n  signalSpecific?: string,\n  nonSignalSpecific?: string\n): string | undefined {\n  if (signalSpecific != null && signalSpecific !== '') {\n    return signalSpecific;\n  }\n\n  if (nonSignalSpecific != null && nonSignalSpecific !== '') {\n    return nonSignalSpecific;\n  }\n\n  return undefined;\n}\n\nfunction getMetadataFromEnv(signalIdentifier: string): Metadata | undefined {\n  const signalSpecificRawHeaders =\n    process.env[`OTEL_EXPORTER_OTLP_${signalIdentifier}_HEADERS`]?.trim();\n  const nonSignalSpecificRawHeaders =\n    process.env['OTEL_EXPORTER_OTLP_HEADERS']?.trim();\n\n  const signalSpecificHeaders = parseKeyPairsIntoRecord(\n    signalSpecificRawHeaders\n  );\n  const nonSignalSpecificHeaders = parseKeyPairsIntoRecord(\n    nonSignalSpecificRawHeaders\n  );\n\n  if (\n    Object.keys(signalSpecificHeaders).length === 0 &&\n    Object.keys(nonSignalSpecificHeaders).length === 0\n  ) {\n    return undefined;\n  }\n\n  const mergeHeaders = Object.assign(\n    {},\n    nonSignalSpecificHeaders,\n    signalSpecificHeaders\n  );\n\n  const metadata = createEmptyMetadata();\n\n  // for this to work, metadata MUST be empty - otherwise `Metadata#set()` will merge items.\n  for (const [key, value] of Object.entries(mergeHeaders)) {\n    metadata.set(key, value);\n  }\n\n  return metadata;\n}\n\nfunction getMetadataProviderFromEnv(\n  signalIdentifier: string\n): (() => Metadata) | undefined {\n  const metadata = getMetadataFromEnv(signalIdentifier);\n  if (metadata == null) {\n    return undefined;\n  }\n\n  return () => metadata;\n}\n\nfunction getUrlFromEnv(signalIdentifier: string) {\n  // This does not change the string beyond trimming on purpose.\n  // Normally a user would just use a host and port for gRPC, but the OTLP Exporter specification requires us to\n  // use the raw provided endpoint to derive credential settings. Therefore, we only normalize right when\n  // we merge user-provided, env-provided and defaults together, and we have determined which credentials to use.\n  //\n  // Examples:\n  // - example.test:4317 -> use secure credentials from environment (or provided via code)\n  // - http://example.test:4317 -> use insecure credentials if nothing else is provided\n  // - https://example.test:4317 -> use secure credentials from environment (or provided via code)\n\n  const specificEndpoint =\n    process.env[`OTEL_EXPORTER_OTLP_${signalIdentifier}_ENDPOINT`]?.trim();\n  const nonSpecificEndpoint =\n    process.env[`OTEL_EXPORTER_OTLP_ENDPOINT`]?.trim();\n\n  return fallbackIfNullishOrBlank(specificEndpoint, nonSpecificEndpoint);\n}\n\n/**\n * Determines whether the env var for insecure credentials is set to {@code true}.\n *\n * It will allow the following values as {@code true}\n * - 'true'\n * - 'true   '\n * - '   true'\n * - 'TrUE'\n * - 'TRUE'\n *\n * It will not allow:\n * - 'true false'\n * - 'false true'\n * - 'true!'\n * - 'true,true'\n * - '1'\n * - ' '\n *\n * @param signalIdentifier\n */\nfunction getInsecureSettingFromEnv(signalIdentifier: string): boolean {\n  const signalSpecificInsecureValue = process.env[\n    `OTEL_EXPORTER_OTLP_${signalIdentifier}_INSECURE`\n  ]\n    ?.toLowerCase()\n    .trim();\n  const nonSignalSpecificInsecureValue = process.env[\n    `OTEL_EXPORTER_OTLP_INSECURE`\n  ]\n    ?.toLowerCase()\n    .trim();\n\n  return (\n    fallbackIfNullishOrBlank(\n      signalSpecificInsecureValue,\n      nonSignalSpecificInsecureValue\n    ) === 'true'\n  );\n}\n\nfunction readFileFromEnv(\n  signalSpecificEnvVar: string,\n  nonSignalSpecificEnvVar: string,\n  warningMessage: string\n): Buffer | undefined {\n  const signalSpecificPath = process.env[signalSpecificEnvVar]?.trim();\n  const nonSignalSpecificPath = process.env[nonSignalSpecificEnvVar]?.trim();\n\n  const filePath = fallbackIfNullishOrBlank(\n    signalSpecificPath,\n    nonSignalSpecificPath\n  );\n\n  if (filePath != null) {\n    try {\n      return fs.readFileSync(path.resolve(process.cwd(), filePath));\n    } catch {\n      diag.warn(warningMessage);\n      return undefined;\n    }\n  } else {\n    return undefined;\n  }\n}\n\nfunction getClientCertificateFromEnv(\n  signalIdentifier: string\n): Buffer | undefined {\n  return readFileFromEnv(\n    `OTEL_EXPORTER_OTLP_${signalIdentifier}_CLIENT_CERTIFICATE`,\n    'OTEL_EXPORTER_OTLP_CLIENT_CERTIFICATE',\n    'Failed to read client certificate chain file'\n  );\n}\n\nfunction getClientKeyFromEnv(signalIdentifier: string): Buffer | undefined {\n  return readFileFromEnv(\n    `OTEL_EXPORTER_OTLP_${signalIdentifier}_CLIENT_KEY`,\n    'OTEL_EXPORTER_OTLP_CLIENT_KEY',\n    'Failed to read client certificate private key file'\n  );\n}\n\nfunction getRootCertificateFromEnv(\n  signalIdentifier: string\n): Buffer | undefined {\n  return readFileFromEnv(\n    `OTEL_EXPORTER_OTLP_${signalIdentifier}_CERTIFICATE`,\n    'OTEL_EXPORTER_OTLP_CERTIFICATE',\n    'Failed to read root certificate file'\n  );\n}\n\nfunction getCredentialsFromEnvIgnoreInsecure(\n  signalIdentifier: string\n): ChannelCredentials {\n  const clientKey = getClientKeyFromEnv(signalIdentifier);\n  const clientCertificate = getClientCertificateFromEnv(signalIdentifier);\n  const rootCertificate = getRootCertificateFromEnv(signalIdentifier);\n\n  // if the chain is not intact, @grpc/grpc-js will throw. This is fine when a user provides it in code, but env var\n  // config is not allowed to throw, so we add this safeguard and try to make the best of it here.\n  const clientChainIntact = clientKey != null && clientCertificate != null;\n  if (rootCertificate != null && !clientChainIntact) {\n    diag.warn(\n      'Client key and certificate must both be provided, but one was missing - attempting to create credentials from just the root certificate'\n    );\n    return createSslCredentials(getRootCertificateFromEnv(signalIdentifier));\n  }\n\n  return createSslCredentials(rootCertificate, clientKey, clientCertificate);\n}\n\nfunction getCredentialsFromEnv(signalIdentifier: string): ChannelCredentials {\n  if (getInsecureSettingFromEnv(signalIdentifier)) {\n    return createInsecureCredentials();\n  }\n\n  return getCredentialsFromEnvIgnoreInsecure(signalIdentifier);\n}\n\nexport function getOtlpGrpcConfigurationFromEnv(\n  signalIdentifier: string\n): Partial<UnresolvedOtlpGrpcConfiguration> {\n  return {\n    ...getSharedConfigurationFromEnvironment(signalIdentifier),\n    metadata: getMetadataProviderFromEnv(signalIdentifier),\n    url: getUrlFromEnv(signalIdentifier),\n    credentials: (finalResolvedUrl: string) => {\n      // Always assume insecure on http:// and secure on https://, the protocol always takes precedence over the insecure setting.\n      // note: the spec does not make any exception for\n      // - \"localhost:4317\". If the protocol is omitted, credentials are required unless insecure is set\n      // - \"unix://\", as it's neither http:// nor https:// and therefore credentials are required unless insecure is set\n      if (finalResolvedUrl.startsWith('http://')) {\n        return () => {\n          return createInsecureCredentials();\n        };\n      } else if (finalResolvedUrl.startsWith('https://')) {\n        return () => {\n          return getCredentialsFromEnvIgnoreInsecure(signalIdentifier);\n        };\n      }\n\n      // defer to env settings in this case\n      return () => {\n        return getCredentialsFromEnv(signalIdentifier);\n      };\n    },\n  };\n}\n"]}