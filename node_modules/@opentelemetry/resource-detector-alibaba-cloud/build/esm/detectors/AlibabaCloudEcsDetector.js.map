{"version":3,"file":"AlibabaCloudEcsDetector.js","sourceRoot":"","sources":["../../../src/detectors/AlibabaCloudEcsDetector.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { context, diag } from '@opentelemetry/api';\nimport { suppressTracing } from '@opentelemetry/core';\nimport {\n  ResourceDetector,\n  DetectedResource,\n  DetectedResourceAttributes,\n} from '@opentelemetry/resources';\nimport {\n  CLOUDPLATFORMVALUES_ALIBABA_CLOUD_ECS,\n  CLOUDPROVIDERVALUES_ALIBABA_CLOUD,\n  SEMRESATTRS_CLOUD_ACCOUNT_ID,\n  SEMRESATTRS_CLOUD_AVAILABILITY_ZONE,\n  SEMRESATTRS_CLOUD_PLATFORM,\n  SEMRESATTRS_CLOUD_PROVIDER,\n  SEMRESATTRS_CLOUD_REGION,\n  SEMRESATTRS_HOST_ID,\n  SEMRESATTRS_HOST_NAME,\n  SEMRESATTRS_HOST_TYPE,\n} from '@opentelemetry/semantic-conventions';\n\nimport * as http from 'http';\n\n/**\n * The AlibabaCloudEcsDetector can be used to detect if a process is running in\n * AlibabaCloud ECS and return a {@link Resource} populated with metadata about\n * the ECS instance. Returns an empty Resource if detection fails.\n */\nclass AlibabaCloudEcsDetector implements ResourceDetector {\n  /**\n   * See https://www.alibabacloud.com/help/doc-detail/67254.htm for\n   * documentation about the AlibabaCloud instance identity document.\n   */\n  readonly ALIBABA_CLOUD_IDMS_ENDPOINT = '100.100.100.200';\n  readonly ALIBABA_CLOUD_INSTANCE_IDENTITY_DOCUMENT_PATH =\n    '/latest/dynamic/instance-identity/document';\n  readonly ALIBABA_CLOUD_INSTANCE_HOST_DOCUMENT_PATH =\n    '/latest/meta-data/hostname';\n  readonly MILLISECONDS_TIME_OUT = 1000;\n\n  /**\n   * Attempts to connect and obtain an AlibabaCloud instance Identity document.\n   * If the connection is successful it returns a promise containing a\n   * {@link Resource} populated with instance metadata.\n   *\n   * @param config (unused) The resource detection config\n   */\n  detect(): DetectedResource {\n    const dataPromise = context.with(suppressTracing(context.active()), () =>\n      this._gatherData()\n    );\n\n    const attrNames = [\n      SEMRESATTRS_CLOUD_PROVIDER,\n      SEMRESATTRS_CLOUD_PLATFORM,\n      SEMRESATTRS_CLOUD_ACCOUNT_ID,\n      SEMRESATTRS_CLOUD_REGION,\n      SEMRESATTRS_CLOUD_AVAILABILITY_ZONE,\n      SEMRESATTRS_HOST_ID,\n      SEMRESATTRS_HOST_TYPE,\n      SEMRESATTRS_HOST_NAME,\n    ];\n\n    const attributes = {} as DetectedResourceAttributes;\n    attrNames.forEach(name => {\n      // Each resource attribute is determined asynchronously in _gatherData().\n      attributes[name] = dataPromise.then(data => data[name]);\n    });\n\n    return { attributes };\n  }\n\n  /** Gets identity and host info and returns them as attribs. Empty object if fails */\n  async _gatherData(): Promise<DetectedResourceAttributes> {\n    try {\n      const {\n        'owner-account-id': accountId,\n        'instance-id': instanceId,\n        'instance-type': instanceType,\n        'region-id': region,\n        'zone-id': availabilityZone,\n      } = await this._fetchIdentity();\n      const hostname = await this._fetchHost();\n\n      return {\n        [SEMRESATTRS_CLOUD_PROVIDER]: CLOUDPROVIDERVALUES_ALIBABA_CLOUD,\n        [SEMRESATTRS_CLOUD_PLATFORM]: CLOUDPLATFORMVALUES_ALIBABA_CLOUD_ECS,\n        [SEMRESATTRS_CLOUD_ACCOUNT_ID]: accountId,\n        [SEMRESATTRS_CLOUD_REGION]: region,\n        [SEMRESATTRS_CLOUD_AVAILABILITY_ZONE]: availabilityZone,\n        [SEMRESATTRS_HOST_ID]: instanceId,\n        [SEMRESATTRS_HOST_TYPE]: instanceType,\n        [SEMRESATTRS_HOST_NAME]: hostname,\n      };\n    } catch (err: any) {\n      diag.debug(\n        `${this.constructor.name}: did not detect resource: ${err?.message}`\n      );\n      return {};\n    }\n  }\n\n  /**\n   * Fetch AlibabaCloud instance document url with http requests. If the\n   * application is running on an ECS instance, we should be able to get back a\n   * valid JSON document. Parses that document and stores the identity\n   * properties in a local map.\n   */\n  private async _fetchIdentity(): Promise<any> {\n    const options = {\n      host: this.ALIBABA_CLOUD_IDMS_ENDPOINT,\n      path: this.ALIBABA_CLOUD_INSTANCE_IDENTITY_DOCUMENT_PATH,\n      method: 'GET',\n      timeout: this.MILLISECONDS_TIME_OUT,\n    };\n    const identity = await this._fetchString(options);\n    return JSON.parse(identity);\n  }\n\n  private async _fetchHost(): Promise<string> {\n    const options = {\n      host: this.ALIBABA_CLOUD_IDMS_ENDPOINT,\n      path: this.ALIBABA_CLOUD_INSTANCE_HOST_DOCUMENT_PATH,\n      method: 'GET',\n      timeout: this.MILLISECONDS_TIME_OUT,\n    };\n    return await this._fetchString(options);\n  }\n\n  private async _fetchString(options: http.RequestOptions): Promise<string> {\n    return new Promise((resolve, reject) => {\n      const timeoutId = setTimeout(() => {\n        req.destroy(new Error('ECS metadata api request timed out.'));\n      }, this.MILLISECONDS_TIME_OUT);\n\n      const req = http.request(options, res => {\n        clearTimeout(timeoutId);\n        const { statusCode } = res;\n        if (\n          typeof statusCode !== 'number' ||\n          !(statusCode >= 200 && statusCode < 300)\n        ) {\n          res.destroy();\n          return reject(\n            new Error(`Failed to load page, status code: ${statusCode}`)\n          );\n        }\n\n        res.setEncoding('utf8');\n        let rawData = '';\n        res.on('data', chunk => (rawData += chunk));\n        res.on('error', err => {\n          reject(err);\n        });\n        res.on('end', () => {\n          resolve(rawData);\n        });\n      });\n      req.on('error', err => {\n        clearTimeout(timeoutId);\n        reject(err);\n      });\n      req.end();\n    });\n  }\n}\n\nexport const alibabaCloudEcsDetector = new AlibabaCloudEcsDetector();\n"]}