{"version":3,"file":"gcCollector.js","sourceRoot":"","sources":["../../../src/metrics/gcCollector.ts"],"names":[],"mappings":";;;AAiBA,4CAA0D;AAC1D,mDAAgD;AAChD,8CAA8C;AAG9C,MAAM,+BAA+B,GAAG,aAAa,CAAC;AACtD,MAAM,2BAA2B,GAAG,CAAC,IAAI,EAAE,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;AAEvD,MAAM,KAAK,GAAa,EAAE,CAAC;AAC3B,KAAK,CAAC,UAAU,CAAC,SAAS,CAAC,yBAAyB,CAAC,GAAG,OAAO,CAAC;AAChE,KAAK,CAAC,UAAU,CAAC,SAAS,CAAC,yBAAyB,CAAC,GAAG,OAAO,CAAC;AAChE,KAAK,CAAC,UAAU,CAAC,SAAS,CAAC,+BAA+B,CAAC,GAAG,aAAa,CAAC;AAC5E,KAAK,CAAC,UAAU,CAAC,SAAS,CAAC,0BAA0B,CAAC,GAAG,QAAQ,CAAC;AAElE,MAAa,WAAY,SAAQ,6BAAa;IACpC,0BAA0B,CAAa;IACvC,SAAS,CAAsB;IAEvC,YACE,SAA2C,EAAE,EAC7C,UAAkB;QAElB,KAAK,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC;QAC1B,IAAI,CAAC,SAAS,GAAG,IAAI,UAAU,CAAC,mBAAmB,CAAC,IAAI,CAAC,EAAE;YACzD,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO;gBAAE,OAAO;YAElC,MAAM,KAAK,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC,CAAC;YACnC,4BAA4B;YAC5B,oCAAoC;YACpC,6HAA6H;YAC7H,8DAA8D;YAC9D,aAAa;YACb,MAAM,IAAI,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;YACzE,IAAI,CAAC,0BAA0B,EAAE,MAAM,CACrC,KAAK,CAAC,QAAQ,GAAG,IAAI,EACrB,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,UAAU,UAAU,CAAC,EAAE,IAAI,EAAE,CAAC,CACxD,CAAC;QACJ,CAAC,CAAC,CAAC;IACL,CAAC;IAED,uBAAuB,CAAC,KAAY;QAClC,IAAI,CAAC,0BAA0B,GAAG,KAAK,CAAC,eAAe,CACrD,GAAG,IAAI,CAAC,UAAU,IAAI,+BAA+B,EAAE,EACvD;YACE,WAAW,EACT,kFAAkF;YACpF,IAAI,EAAE,GAAG;YACT,SAAS,EAAE,eAAS,CAAC,MAAM;YAC3B,MAAM,EAAE;gBACN,wBAAwB,EAAE,2BAA2B;aACtD;SACF,CACF,CAAC;IACJ,CAAC;IAED,cAAc;QACZ,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,EAAE,UAAU,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IACjD,CAAC;IAED,eAAe;QACb,IAAI,CAAC,SAAS,CAAC,UAAU,EAAE,CAAC;IAC9B,CAAC;CACF;AAhDD,kCAgDC","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { RuntimeNodeInstrumentationConfig } from '../types';\nimport { Meter } from '@opentelemetry/api';\nimport { Histogram, ValueType } from '@opentelemetry/api';\nimport { BaseCollector } from './baseCollector';\nimport * as perf_hooks from 'node:perf_hooks';\nimport { PerformanceObserver } from 'node:perf_hooks';\n\nconst ATTR_NODEJS_GC_DURATION_SECONDS = 'gc.duration';\nconst DEFAULT_GC_DURATION_BUCKETS = [0.01, 0.1, 1, 10];\n\nconst kinds: string[] = [];\nkinds[perf_hooks.constants.NODE_PERFORMANCE_GC_MAJOR] = 'major';\nkinds[perf_hooks.constants.NODE_PERFORMANCE_GC_MINOR] = 'minor';\nkinds[perf_hooks.constants.NODE_PERFORMANCE_GC_INCREMENTAL] = 'incremental';\nkinds[perf_hooks.constants.NODE_PERFORMANCE_GC_WEAKCB] = 'weakcb';\n\nexport class GCCollector extends BaseCollector {\n  private _gcDurationByKindHistogram?: Histogram;\n  private _observer: PerformanceObserver;\n\n  constructor(\n    config: RuntimeNodeInstrumentationConfig = {},\n    namePrefix: string\n  ) {\n    super(config, namePrefix);\n    this._observer = new perf_hooks.PerformanceObserver(list => {\n      if (!this._config.enabled) return;\n\n      const entry = list.getEntries()[0];\n      // Node < 16 uses entry.kind\n      // Node >= 16 uses entry.detail.kind\n      // See: https://nodejs.org/docs/latest-v16.x/api/deprecations.html#deprecations_dep0152_extension_performanceentry_properties\n      // eslint-disable-next-line  @typescript-eslint/ban-ts-comment\n      // @ts-ignore\n      const kind = entry.detail ? kinds[entry.detail.kind] : kinds[entry.kind];\n      this._gcDurationByKindHistogram?.record(\n        entry.duration / 1000,\n        Object.assign({ [`${this.namePrefix}.gc.type`]: kind })\n      );\n    });\n  }\n\n  updateMetricInstruments(meter: Meter): void {\n    this._gcDurationByKindHistogram = meter.createHistogram(\n      `${this.namePrefix}.${ATTR_NODEJS_GC_DURATION_SECONDS}`,\n      {\n        description:\n          'Garbage collection duration by kind, one of major, minor, incremental or weakcb.',\n        unit: 's',\n        valueType: ValueType.DOUBLE,\n        advice: {\n          explicitBucketBoundaries: DEFAULT_GC_DURATION_BUCKETS,\n        },\n      }\n    );\n  }\n\n  internalEnable(): void {\n    this._observer.observe({ entryTypes: ['gc'] });\n  }\n\n  internalDisable(): void {\n    this._observer.disconnect();\n  }\n}\n"]}