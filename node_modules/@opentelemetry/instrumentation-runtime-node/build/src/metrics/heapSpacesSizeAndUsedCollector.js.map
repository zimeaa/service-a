{"version":3,"file":"heapSpacesSizeAndUsedCollector.js","sourceRoot":"","sources":["../../../src/metrics/heapSpacesSizeAndUsedCollector.ts"],"names":[],"mappings":";;;AAiBA,mDAAgD;AAChD,8BAA8B;AAE9B,qDAAiE;AAEjE,IAAY,kBAKX;AALD,WAAY,kBAAkB;IAC5B,qDAA+B,CAAA;IAC/B,+CAAyB,CAAA;IACzB,oEAA8C,CAAA;IAC9C,kEAA4C,CAAA;AAC9C,CAAC,EALW,kBAAkB,GAAlB,0BAAkB,KAAlB,0BAAkB,QAK7B;AAEY,QAAA,WAAW,GACtB;IACE,CAAC,kBAAkB,CAAC,SAAS,CAAC,EAAE;QAC9B,WAAW,EAAE,uCAAuC;KACrD;IACD,CAAC,kBAAkB,CAAC,IAAI,CAAC,EAAE;QACzB,WAAW,EAAE,6BAA6B;KAC3C;IACD,CAAC,kBAAkB,CAAC,SAAS,CAAC,EAAE;QAC9B,WAAW,EAAE,4BAA4B;KAC1C;IACD,CAAC,kBAAkB,CAAC,QAAQ,CAAC,EAAE;QAC7B,WAAW,EAAE,iCAAiC;KAC/C;CACF,CAAC;AAEJ,MAAa,8BAA+B,SAAQ,6BAAa;IAC/D,YACE,SAA2C,EAAE,EAC7C,UAAkB;QAElB,KAAK,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC;IAC5B,CAAC;IAED,uBAAuB,CAAC,KAAY;QAClC,MAAM,SAAS,GAAG,KAAK,CAAC,qBAAqB,CAC3C,GAAG,IAAI,CAAC,UAAU,IAAI,kBAAkB,CAAC,SAAS,EAAE,EACpD;YACE,WAAW,EAAE,mBAAW,CAAC,kBAAkB,CAAC,SAAS,CAAC,CAAC,WAAW;YAClE,IAAI,EAAE,IAAI;SACX,CACF,CAAC;QACF,MAAM,aAAa,GAAG,KAAK,CAAC,qBAAqB,CAC/C,GAAG,IAAI,CAAC,UAAU,IAAI,kBAAkB,CAAC,IAAI,EAAE,EAC/C;YACE,WAAW,EAAE,mBAAW,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC,WAAW;YAC7D,IAAI,EAAE,IAAI;SACX,CACF,CAAC;QACF,MAAM,kBAAkB,GAAG,KAAK,CAAC,qBAAqB,CACpD,GAAG,IAAI,CAAC,UAAU,IAAI,kBAAkB,CAAC,SAAS,EAAE,EACpD;YACE,WAAW,EAAE,mBAAW,CAAC,kBAAkB,CAAC,SAAS,CAAC,CAAC,WAAW;YAClE,IAAI,EAAE,IAAI;SACX,CACF,CAAC;QACF,MAAM,iBAAiB,GAAG,KAAK,CAAC,qBAAqB,CACnD,GAAG,IAAI,CAAC,UAAU,IAAI,kBAAkB,CAAC,QAAQ,EAAE,EACnD;YACE,WAAW,EAAE,mBAAW,CAAC,kBAAkB,CAAC,QAAQ,CAAC,CAAC,WAAW;YACjE,IAAI,EAAE,IAAI;SACX,CACF,CAAC;QACF,MAAM,0BAA0B,GAAG,GAAG,IAAI,CAAC,UAAU,IAAI,sCAAyB,EAAE,CAAC;QAErF,KAAK,CAAC,0BAA0B,CAC9B,gBAAgB,CAAC,EAAE;YACjB,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO;gBAAE,OAAO;YAElC,MAAM,IAAI,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC;YAC3B,IAAI,IAAI,KAAK,SAAS;gBAAE,OAAO;YAC/B,KAAK,MAAM,KAAK,IAAI,IAAI,EAAE;gBACxB,MAAM,SAAS,GAAG,KAAK,CAAC,UAAU,CAAC;gBAEnC,gBAAgB,CAAC,OAAO,CAAC,SAAS,EAAE,KAAK,CAAC,UAAU,EAAE;oBACpD,CAAC,0BAA0B,CAAC,EAAE,SAAS;iBACxC,CAAC,CAAC;gBAEH,gBAAgB,CAAC,OAAO,CAAC,aAAa,EAAE,KAAK,CAAC,eAAe,EAAE;oBAC7D,CAAC,0BAA0B,CAAC,EAAE,SAAS;iBACxC,CAAC,CAAC;gBAEH,gBAAgB,CAAC,OAAO,CACtB,kBAAkB,EAClB,KAAK,CAAC,oBAAoB,EAC1B;oBACE,CAAC,0BAA0B,CAAC,EAAE,SAAS;iBACxC,CACF,CAAC;gBAEF,gBAAgB,CAAC,OAAO,CACtB,iBAAiB,EACjB,KAAK,CAAC,mBAAmB,EACzB;oBACE,CAAC,0BAA0B,CAAC,EAAE,SAAS;iBACxC,CACF,CAAC;aACH;QACH,CAAC,EACD,CAAC,SAAS,EAAE,aAAa,EAAE,kBAAkB,EAAE,iBAAiB,CAAC,CAClE,CAAC;IACJ,CAAC;IAED,cAAc,KAAU,CAAC;IAEzB,eAAe,KAAU,CAAC;IAElB,MAAM;QACZ,OAAO,EAAE,CAAC,sBAAsB,EAAE,CAAC;IACrC,CAAC;CACF;AApFD,wEAoFC","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { RuntimeNodeInstrumentationConfig } from '../types';\nimport { Meter } from '@opentelemetry/api';\nimport { BaseCollector } from './baseCollector';\nimport * as v8 from 'node:v8';\nimport { HeapSpaceInfo } from 'v8';\nimport { ATTR_V8JS_HEAP_SPACE_NAME } from '../consts/attributes';\n\nexport enum V8HeapSpaceMetrics {\n  heapLimit = 'memory.heap.limit',\n  used = 'memory.heap.used',\n  available = 'memory.heap.space.available_size',\n  physical = 'memory.heap.space.physical_size',\n}\n\nexport const metricNames: Record<V8HeapSpaceMetrics, { description: string }> =\n  {\n    [V8HeapSpaceMetrics.heapLimit]: {\n      description: 'Total heap memory size pre-allocated.',\n    },\n    [V8HeapSpaceMetrics.used]: {\n      description: 'Heap Memory size allocated.',\n    },\n    [V8HeapSpaceMetrics.available]: {\n      description: 'Heap space available size.',\n    },\n    [V8HeapSpaceMetrics.physical]: {\n      description: 'Committed size of a heap space.',\n    },\n  };\n\nexport class HeapSpacesSizeAndUsedCollector extends BaseCollector {\n  constructor(\n    config: RuntimeNodeInstrumentationConfig = {},\n    namePrefix: string\n  ) {\n    super(config, namePrefix);\n  }\n\n  updateMetricInstruments(meter: Meter): void {\n    const heapLimit = meter.createObservableGauge(\n      `${this.namePrefix}.${V8HeapSpaceMetrics.heapLimit}`,\n      {\n        description: metricNames[V8HeapSpaceMetrics.heapLimit].description,\n        unit: 'By',\n      }\n    );\n    const heapSpaceUsed = meter.createObservableGauge(\n      `${this.namePrefix}.${V8HeapSpaceMetrics.used}`,\n      {\n        description: metricNames[V8HeapSpaceMetrics.used].description,\n        unit: 'By',\n      }\n    );\n    const heapSpaceAvailable = meter.createObservableGauge(\n      `${this.namePrefix}.${V8HeapSpaceMetrics.available}`,\n      {\n        description: metricNames[V8HeapSpaceMetrics.available].description,\n        unit: 'By',\n      }\n    );\n    const heapSpacePhysical = meter.createObservableGauge(\n      `${this.namePrefix}.${V8HeapSpaceMetrics.physical}`,\n      {\n        description: metricNames[V8HeapSpaceMetrics.physical].description,\n        unit: 'By',\n      }\n    );\n    const heapSpaceNameAttributeName = `${this.namePrefix}.${ATTR_V8JS_HEAP_SPACE_NAME}`;\n\n    meter.addBatchObservableCallback(\n      observableResult => {\n        if (!this._config.enabled) return;\n\n        const data = this.scrape();\n        if (data === undefined) return;\n        for (const space of data) {\n          const spaceName = space.space_name;\n\n          observableResult.observe(heapLimit, space.space_size, {\n            [heapSpaceNameAttributeName]: spaceName,\n          });\n\n          observableResult.observe(heapSpaceUsed, space.space_used_size, {\n            [heapSpaceNameAttributeName]: spaceName,\n          });\n\n          observableResult.observe(\n            heapSpaceAvailable,\n            space.space_available_size,\n            {\n              [heapSpaceNameAttributeName]: spaceName,\n            }\n          );\n\n          observableResult.observe(\n            heapSpacePhysical,\n            space.physical_space_size,\n            {\n              [heapSpaceNameAttributeName]: spaceName,\n            }\n          );\n        }\n      },\n      [heapLimit, heapSpaceUsed, heapSpaceAvailable, heapSpacePhysical]\n    );\n  }\n\n  internalEnable(): void {}\n\n  internalDisable(): void {}\n\n  private scrape(): HeapSpaceInfo[] {\n    return v8.getHeapSpaceStatistics();\n  }\n}\n"]}