{"version":3,"file":"eventLoopDelayCollector.js","sourceRoot":"","sources":["../../../src/metrics/eventLoopDelayCollector.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { RuntimeNodeInstrumentationConfig } from '../types';\nimport { Meter } from '@opentelemetry/api';\nimport * as perf_hooks from 'node:perf_hooks';\nimport { IntervalHistogram } from 'node:perf_hooks';\nimport { BaseCollector } from './baseCollector';\n\nenum NodeJsEventLoopDelayAttributes {\n  min = 'eventloop.delay.min',\n  max = 'eventloop.delay.max',\n  mean = 'eventloop.delay.mean',\n  stddev = 'eventloop.delay.stddev',\n  p50 = 'eventloop.delay.p50',\n  p90 = 'eventloop.delay.p90',\n  p99 = 'eventloop.delay.p99',\n}\n\nexport const metricNames: Record<\n  NodeJsEventLoopDelayAttributes,\n  { description: string }\n> = {\n  [NodeJsEventLoopDelayAttributes.min]: {\n    description: 'Event loop minimum delay.',\n  },\n  [NodeJsEventLoopDelayAttributes.max]: {\n    description: 'Event loop maximum delay.',\n  },\n  [NodeJsEventLoopDelayAttributes.mean]: {\n    description: 'Event loop mean delay.',\n  },\n  [NodeJsEventLoopDelayAttributes.stddev]: {\n    description: 'Event loop standard deviation delay.',\n  },\n  [NodeJsEventLoopDelayAttributes.p50]: {\n    description: 'Event loop 50 percentile delay.',\n  },\n  [NodeJsEventLoopDelayAttributes.p90]: {\n    description: 'Event loop 90 percentile delay.',\n  },\n  [NodeJsEventLoopDelayAttributes.p99]: {\n    description: 'Event loop 99 percentile delay.',\n  },\n};\n\nexport interface EventLoopLagInformation {\n  min: number;\n  max: number;\n  mean: number;\n  stddev: number;\n  p50: number;\n  p90: number;\n  p99: number;\n}\n\nexport class EventLoopDelayCollector extends BaseCollector {\n  private _histogram: IntervalHistogram;\n\n  constructor(\n    config: RuntimeNodeInstrumentationConfig = {},\n    namePrefix: string\n  ) {\n    super(config, namePrefix);\n    this._histogram = perf_hooks.monitorEventLoopDelay({\n      resolution: config.monitoringPrecision,\n    });\n  }\n\n  updateMetricInstruments(meter: Meter): void {\n    const delayMin = meter.createObservableGauge(\n      `${this.namePrefix}.${NodeJsEventLoopDelayAttributes.min}`,\n      {\n        description:\n          metricNames[NodeJsEventLoopDelayAttributes.min].description,\n        unit: 's',\n      }\n    );\n    const delayMax = meter.createObservableGauge(\n      `${this.namePrefix}.${NodeJsEventLoopDelayAttributes.max}`,\n      {\n        description:\n          metricNames[NodeJsEventLoopDelayAttributes.max].description,\n        unit: 's',\n      }\n    );\n    const delayMean = meter.createObservableGauge(\n      `${this.namePrefix}.${NodeJsEventLoopDelayAttributes.mean}`,\n      {\n        description:\n          metricNames[NodeJsEventLoopDelayAttributes.mean].description,\n        unit: 's',\n      }\n    );\n    const delayStddev = meter.createObservableGauge(\n      `${this.namePrefix}.${NodeJsEventLoopDelayAttributes.stddev}`,\n      {\n        description:\n          metricNames[NodeJsEventLoopDelayAttributes.stddev].description,\n        unit: 's',\n      }\n    );\n    const delayp50 = meter.createObservableGauge(\n      `${this.namePrefix}.${NodeJsEventLoopDelayAttributes.p50}`,\n      {\n        description:\n          metricNames[NodeJsEventLoopDelayAttributes.p50].description,\n        unit: 's',\n      }\n    );\n    const delayp90 = meter.createObservableGauge(\n      `${this.namePrefix}.${NodeJsEventLoopDelayAttributes.p90}`,\n      {\n        description:\n          metricNames[NodeJsEventLoopDelayAttributes.p90].description,\n        unit: 's',\n      }\n    );\n    const delayp99 = meter.createObservableGauge(\n      `${this.namePrefix}.${NodeJsEventLoopDelayAttributes.p99}`,\n      {\n        description:\n          metricNames[NodeJsEventLoopDelayAttributes.p99].description,\n        unit: 's',\n      }\n    );\n\n    meter.addBatchObservableCallback(\n      async observableResult => {\n        if (!this._config.enabled) return;\n\n        const data = this.scrape();\n        if (data === undefined) return;\n        if (this._histogram.count < 5) return; // Don't return histogram data if we have less than 5 samples\n\n        observableResult.observe(delayMin, data.min);\n        observableResult.observe(delayMax, data.max);\n        observableResult.observe(delayMean, data.mean);\n        observableResult.observe(delayStddev, data.stddev);\n        observableResult.observe(delayp50, data.p50);\n        observableResult.observe(delayp90, data.p90);\n        observableResult.observe(delayp99, data.p99);\n\n        this._histogram.reset();\n      },\n      [delayMin, delayMax, delayMean, delayStddev, delayp50, delayp90, delayp99]\n    );\n  }\n\n  internalEnable(): void {\n    this._histogram.enable();\n  }\n\n  internalDisable(): void {\n    this._histogram.disable();\n  }\n\n  private scrape(): EventLoopLagInformation {\n    return {\n      min: this.checkNan(this._histogram.min / 1e9),\n      max: this.checkNan(this._histogram.max / 1e9),\n      mean: this.checkNan(this._histogram.mean / 1e9),\n      stddev: this.checkNan(this._histogram.stddev / 1e9),\n      p50: this.checkNan(this._histogram.percentile(50) / 1e9),\n      p90: this.checkNan(this._histogram.percentile(90) / 1e9),\n      p99: this.checkNan(this._histogram.percentile(99) / 1e9),\n    };\n  }\n\n  private checkNan(value: number) {\n    return isNaN(value) ? 0 : value;\n  }\n}\n"]}