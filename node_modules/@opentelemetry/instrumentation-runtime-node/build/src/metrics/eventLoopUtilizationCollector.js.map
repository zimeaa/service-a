{"version":3,"file":"eventLoopUtilizationCollector.js","sourceRoot":"","sources":["../../../src/metrics/eventLoopUtilizationCollector.ts"],"names":[],"mappings":";;;AAAA;;;;;;;;;;;;;;GAcG;AACH,qDAAoE;AAGpE,mDAAgD;AAEhD,MAAM,EAAE,oBAAoB,EAAE,6BAA6B,EAAE,GAAG,6BAAW,CAAC;AAE/D,QAAA,kCAAkC,GAAG,uBAAuB,CAAC;AAE1E,MAAa,6BAA8B,SAAQ,6BAAa;IACtD,UAAU,CAAwB;IAE1C,YACE,SAA2C,EAAE,EAC7C,UAAkB;QAElB,KAAK,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC;IAC5B,CAAC;IAEM,uBAAuB,CAAC,KAAY;QACzC,KAAK;aACF,qBAAqB,CACpB,GAAG,IAAI,CAAC,UAAU,IAAI,0CAAkC,EAAE,EAC1D;YACE,WAAW,EAAE,wBAAwB;YACrC,IAAI,EAAE,GAAG;SACV,CACF;aACA,WAAW,CAAC,KAAK,EAAC,gBAAgB,EAAC,EAAE;YACpC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO;gBAAE,OAAO;YAElC,MAAM,GAAG,GAAG,6BAA6B,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;YAC3D,gBAAgB,CAAC,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;YAC1C,IAAI,CAAC,UAAU,GAAG,GAAG,CAAC;QACxB,CAAC,CAAC,CAAC;IACP,CAAC;IAES,eAAe,KAAU,CAAC;IAE1B,cAAc,KAAU,CAAC;CACpC;AA/BD,sEA+BC","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { EventLoopUtilization, performance } from 'node:perf_hooks';\nimport { RuntimeNodeInstrumentationConfig } from '../types';\nimport { Meter } from '@opentelemetry/api';\nimport { BaseCollector } from './baseCollector';\n\nconst { eventLoopUtilization: eventLoopUtilizationCollector } = performance;\n\nexport const ATTR_NODEJS_EVENT_LOOP_UTILIZATION = 'eventloop.utilization';\n\nexport class EventLoopUtilizationCollector extends BaseCollector {\n  private _lastValue?: EventLoopUtilization;\n\n  constructor(\n    config: RuntimeNodeInstrumentationConfig = {},\n    namePrefix: string\n  ) {\n    super(config, namePrefix);\n  }\n\n  public updateMetricInstruments(meter: Meter): void {\n    meter\n      .createObservableGauge(\n        `${this.namePrefix}.${ATTR_NODEJS_EVENT_LOOP_UTILIZATION}`,\n        {\n          description: 'Event loop utilization',\n          unit: '1',\n        }\n      )\n      .addCallback(async observableResult => {\n        if (!this._config.enabled) return;\n\n        const elu = eventLoopUtilizationCollector(this._lastValue);\n        observableResult.observe(elu.utilization);\n        this._lastValue = elu;\n      });\n  }\n\n  protected internalDisable(): void {}\n\n  protected internalEnable(): void {}\n}\n"]}