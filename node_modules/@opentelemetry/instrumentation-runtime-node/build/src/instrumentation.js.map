{"version":3,"file":"instrumentation.js","sourceRoot":"","sources":["../../src/instrumentation.ts"],"names":[],"mappings":";;;AAAA;;;;;;;;;;;;;;GAcG;AACH,oEAAqE;AAIrE,2FAAwF;AACxF,+EAA4E;AAC5E,uDAAoD;AACpD,6FAA0F;AAC1F,2EAAwE;AACxE,6EAA0E;AAC1E,kBAAkB;AAClB,uCAA0D;AAE1D,MAAM,cAAc,GAAqC;IACvD,mBAAmB,EAAE,EAAE;CACxB,CAAC;AAEF,MAAa,0BAA2B,SAAQ,qCAAqD;IAClF,WAAW,GAAsB,EAAE,CAAC;IAErD,YAAY,SAA2C,EAAE;QACvD,KAAK,CACH,sBAAY,EACZ,yBAAe,EACf,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,cAAc,EAAE,MAAM,CAAC,CAC1C,CAAC;QACF,IAAI,CAAC,WAAW,GAAG;YACjB,IAAI,6DAA6B,CAC/B,IAAI,CAAC,OAAO,EACZ,+CAAsB,CAAC,MAAM,CAC9B;YACD,IAAI,+CAAsB,CAAC,IAAI,CAAC,OAAO,EAAE,+CAAsB,CAAC,MAAM,CAAC;YACvE,IAAI,iDAAuB,CAAC,IAAI,CAAC,OAAO,EAAE,+CAAsB,CAAC,MAAM,CAAC;YACxE,IAAI,yBAAW,CAAC,IAAI,CAAC,OAAO,EAAE,+CAAsB,CAAC,IAAI,CAAC;YAC1D,IAAI,+DAA8B,CAChC,IAAI,CAAC,OAAO,EACZ,+CAAsB,CAAC,IAAI,CAC5B;SACF,CAAC;QACF,IAAI,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE;YACxB,KAAK,MAAM,SAAS,IAAI,IAAI,CAAC,WAAW,EAAE;gBACxC,SAAS,CAAC,MAAM,EAAE,CAAC;aACpB;SACF;IACH,CAAC;IAED,2CAA2C;IAC3C,oGAAoG;IAC3F,wBAAwB;QAC/B,IAAI,CAAC,IAAI,CAAC,WAAW;YAAE,OAAO;QAC9B,KAAK,MAAM,SAAS,IAAI,IAAI,CAAC,WAAW,EAAE;YACxC,SAAS,CAAC,uBAAuB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SAC/C;IACH,CAAC;IAED,IAAI;QACF,iDAAiD;IACnD,CAAC;IAEQ,MAAM;QACb,IAAI,CAAC,IAAI,CAAC,WAAW;YAAE,OAAO;QAE9B,KAAK,MAAM,SAAS,IAAI,IAAI,CAAC,WAAW,EAAE;YACxC,SAAS,CAAC,MAAM,EAAE,CAAC;SACpB;IACH,CAAC;IAEQ,OAAO;QACd,KAAK,MAAM,SAAS,IAAI,IAAI,CAAC,WAAW,EAAE;YACxC,SAAS,CAAC,OAAO,EAAE,CAAC;SACrB;IACH,CAAC;CACF;AAvDD,gEAuDC","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { InstrumentationBase } from '@opentelemetry/instrumentation';\n\nimport { RuntimeNodeInstrumentationConfig } from './types';\nimport { MetricCollector } from './types/metricCollector';\nimport { EventLoopUtilizationCollector } from './metrics/eventLoopUtilizationCollector';\nimport { EventLoopDelayCollector } from './metrics/eventLoopDelayCollector';\nimport { GCCollector } from './metrics/gcCollector';\nimport { HeapSpacesSizeAndUsedCollector } from './metrics/heapSpacesSizeAndUsedCollector';\nimport { ConventionalNamePrefix } from './types/ConventionalNamePrefix';\nimport { EventLoopTimeCollector } from './metrics/eventLoopTimeCollector';\n/** @knipignore */\nimport { PACKAGE_VERSION, PACKAGE_NAME } from './version';\n\nconst DEFAULT_CONFIG: RuntimeNodeInstrumentationConfig = {\n  monitoringPrecision: 10,\n};\n\nexport class RuntimeNodeInstrumentation extends InstrumentationBase<RuntimeNodeInstrumentationConfig> {\n  private readonly _collectors: MetricCollector[] = [];\n\n  constructor(config: RuntimeNodeInstrumentationConfig = {}) {\n    super(\n      PACKAGE_NAME,\n      PACKAGE_VERSION,\n      Object.assign({}, DEFAULT_CONFIG, config)\n    );\n    this._collectors = [\n      new EventLoopUtilizationCollector(\n        this._config,\n        ConventionalNamePrefix.NodeJs\n      ),\n      new EventLoopTimeCollector(this._config, ConventionalNamePrefix.NodeJs),\n      new EventLoopDelayCollector(this._config, ConventionalNamePrefix.NodeJs),\n      new GCCollector(this._config, ConventionalNamePrefix.V8js),\n      new HeapSpacesSizeAndUsedCollector(\n        this._config,\n        ConventionalNamePrefix.V8js\n      ),\n    ];\n    if (this._config.enabled) {\n      for (const collector of this._collectors) {\n        collector.enable();\n      }\n    }\n  }\n\n  // Called when a new `MeterProvider` is set\n  // the Meter (result of @opentelemetry/api's getMeter) is available as this.meter within this method\n  override _updateMetricInstruments() {\n    if (!this._collectors) return;\n    for (const collector of this._collectors) {\n      collector.updateMetricInstruments(this.meter);\n    }\n  }\n\n  init() {\n    // Not instrumenting or patching a Node.js module\n  }\n\n  override enable() {\n    if (!this._collectors) return;\n\n    for (const collector of this._collectors) {\n      collector.enable();\n    }\n  }\n\n  override disable() {\n    for (const collector of this._collectors) {\n      collector.disable();\n    }\n  }\n}\n"]}