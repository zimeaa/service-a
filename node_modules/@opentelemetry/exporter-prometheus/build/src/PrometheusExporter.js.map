{"version":3,"file":"PrometheusExporter.js","sourceRoot":"","sources":["../../src/PrometheusExporter.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { diag } from '@opentelemetry/api';\nimport { globalErrorHandler } from '@opentelemetry/core';\nimport {\n  AggregationTemporality,\n  AggregationType,\n  MetricReader,\n} from '@opentelemetry/sdk-metrics';\nimport { createServer, IncomingMessage, Server, ServerResponse } from 'http';\nimport { ExporterConfig } from './export/types';\nimport { PrometheusSerializer } from './PrometheusSerializer';\n/** Node.js v8.x compat */\nimport { URL } from 'url';\n\nexport class PrometheusExporter extends MetricReader {\n  static readonly DEFAULT_OPTIONS = {\n    host: undefined,\n    port: 9464,\n    endpoint: '/metrics',\n    prefix: '',\n    appendTimestamp: false,\n    withResourceConstantLabels: undefined,\n  };\n\n  private readonly _host?: string;\n  private readonly _port: number;\n  private readonly _baseUrl: string;\n  private readonly _endpoint: string;\n  private readonly _server: Server;\n  private readonly _prefix?: string;\n  private readonly _appendTimestamp: boolean;\n  private _serializer: PrometheusSerializer;\n  private _startServerPromise: Promise<void> | undefined;\n\n  // This will be required when histogram is implemented. Leaving here so it is not forgotten\n  // Histogram cannot have a attribute named 'le'\n  // private static readonly RESERVED_HISTOGRAM_LABEL = 'le';\n\n  /**\n   * Constructor\n   * @param config Exporter configuration\n   * @param callback Callback to be called after a server was started\n   */\n  constructor(\n    config: ExporterConfig = {},\n    callback: (error: Error | void) => void = () => {}\n  ) {\n    super({\n      aggregationSelector: _instrumentType => {\n        return {\n          type: AggregationType.DEFAULT,\n        };\n      },\n      aggregationTemporalitySelector: _instrumentType =>\n        AggregationTemporality.CUMULATIVE,\n      metricProducers: config.metricProducers,\n    });\n    this._host =\n      config.host ||\n      process.env.OTEL_EXPORTER_PROMETHEUS_HOST ||\n      PrometheusExporter.DEFAULT_OPTIONS.host;\n    this._port =\n      config.port ||\n      Number(process.env.OTEL_EXPORTER_PROMETHEUS_PORT) ||\n      PrometheusExporter.DEFAULT_OPTIONS.port;\n    this._prefix = config.prefix || PrometheusExporter.DEFAULT_OPTIONS.prefix;\n    this._appendTimestamp =\n      typeof config.appendTimestamp === 'boolean'\n        ? config.appendTimestamp\n        : PrometheusExporter.DEFAULT_OPTIONS.appendTimestamp;\n    const _withResourceConstantLabels =\n      config.withResourceConstantLabels ||\n      PrometheusExporter.DEFAULT_OPTIONS.withResourceConstantLabels;\n    // unref to prevent prometheus exporter from holding the process open on exit\n    this._server = createServer(this._requestHandler).unref();\n    this._serializer = new PrometheusSerializer(\n      this._prefix,\n      this._appendTimestamp,\n      _withResourceConstantLabels\n    );\n\n    this._baseUrl = `http://${this._host}:${this._port}/`;\n    this._endpoint = (\n      config.endpoint || PrometheusExporter.DEFAULT_OPTIONS.endpoint\n    ).replace(/^([^/])/, '/$1');\n\n    if (config.preventServerStart !== true) {\n      this.startServer().then(callback, err => {\n        diag.error(err);\n        callback(err);\n      });\n    } else if (callback) {\n      // Do not invoke callback immediately to avoid zalgo problem.\n      queueMicrotask(callback);\n    }\n  }\n\n  override async onForceFlush(): Promise<void> {\n    /** do nothing */\n  }\n\n  /**\n   * Shuts down the export server and clears the registry\n   */\n  override onShutdown(): Promise<void> {\n    return this.stopServer();\n  }\n\n  /**\n   * Stops the Prometheus export server\n   */\n  stopServer(): Promise<void> {\n    if (!this._server) {\n      diag.debug(\n        'Prometheus stopServer() was called but server was never started.'\n      );\n      return Promise.resolve();\n    } else {\n      return new Promise(resolve => {\n        this._server.close(err => {\n          if (!err) {\n            diag.debug('Prometheus exporter was stopped');\n          } else {\n            if (\n              (err as unknown as { code: string }).code !==\n              'ERR_SERVER_NOT_RUNNING'\n            ) {\n              globalErrorHandler(err);\n            }\n          }\n          resolve();\n        });\n      });\n    }\n  }\n\n  /**\n   * Starts the Prometheus export server\n   */\n  startServer(): Promise<void> {\n    this._startServerPromise ??= new Promise((resolve, reject) => {\n      this._server.once('error', reject);\n      this._server.listen(\n        {\n          port: this._port,\n          host: this._host,\n        },\n        () => {\n          diag.debug(\n            `Prometheus exporter server started: ${this._host}:${this._port}/${this._endpoint}`\n          );\n          resolve();\n        }\n      );\n    });\n\n    return this._startServerPromise;\n  }\n\n  /**\n   * Request handler that responds with the current state of metrics\n   * @param _request Incoming HTTP request of server instance\n   * @param response HTTP response object used to response to request\n   */\n  public getMetricsRequestHandler(\n    _request: IncomingMessage,\n    response: ServerResponse\n  ): void {\n    this._exportMetrics(response);\n  }\n\n  /**\n   * Request handler used by http library to respond to incoming requests\n   * for the current state of metrics by the Prometheus backend.\n   *\n   * @param request Incoming HTTP request to export server\n   * @param response HTTP response object used to respond to request\n   */\n  private _requestHandler = (\n    request: IncomingMessage,\n    response: ServerResponse\n  ) => {\n    if (\n      request.url != null &&\n      new URL(request.url, this._baseUrl).pathname === this._endpoint\n    ) {\n      this._exportMetrics(response);\n    } else {\n      this._notFound(response);\n    }\n  };\n\n  /**\n   * Responds to incoming message with current state of all metrics.\n   */\n  private _exportMetrics = (response: ServerResponse) => {\n    response.statusCode = 200;\n    response.setHeader('content-type', 'text/plain');\n    this.collect().then(\n      collectionResult => {\n        const { resourceMetrics, errors } = collectionResult;\n        if (errors.length) {\n          diag.error(\n            'PrometheusExporter: metrics collection errors',\n            ...errors\n          );\n        }\n        response.end(this._serializer.serialize(resourceMetrics));\n      },\n      err => {\n        response.end(`# failed to export metrics: ${err}`);\n      }\n    );\n  };\n\n  /**\n   * Responds with 404 status code to all requests that do not match the configured endpoint.\n   */\n  private _notFound = (response: ServerResponse) => {\n    response.statusCode = 404;\n    response.end();\n  };\n}\n"]}