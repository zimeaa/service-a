{"version":3,"file":"ContainerDetector.js","sourceRoot":"","sources":["../../../src/detectors/ContainerDetector.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ResourceDetector, DetectedResource } from '@opentelemetry/resources';\nimport { SEMRESATTRS_CONTAINER_ID } from '@opentelemetry/semantic-conventions';\n\nimport * as fs from 'fs';\nimport * as util from 'util';\nimport { context, diag } from '@opentelemetry/api';\nimport { suppressTracing } from '@opentelemetry/core';\nimport { extractContainerIdFromLine } from './utils';\n\nexport class ContainerDetector implements ResourceDetector {\n  readonly CONTAINER_ID_LENGTH = 64;\n  readonly DEFAULT_CGROUP_V1_PATH = '/proc/self/cgroup';\n  readonly DEFAULT_CGROUP_V2_PATH = '/proc/self/mountinfo';\n  readonly UTF8_UNICODE = 'utf8';\n  readonly HOSTNAME = 'hostname';\n  readonly MARKING_PREFIX = ['containers', 'overlay-containers'];\n  readonly CRIO = 'crio-';\n  readonly CRI_CONTAINERD = 'cri-containerd-';\n  readonly DOCKER = 'docker-';\n  readonly HEX_STRING_REGEX: RegExp = /^[a-f0-9]+$/i;\n\n  private static readFileAsync = util.promisify(fs.readFile);\n\n  detect(): DetectedResource {\n    const attributes = {\n      [SEMRESATTRS_CONTAINER_ID]: this._getContainerIdWithSuppressedTracing(),\n    };\n    return { attributes };\n  }\n\n  private async _getContainerIdWithSuppressedTracing(): Promise<\n    string | undefined\n  > {\n    return context.with(suppressTracing(context.active()), () =>\n      this._getContainerId()\n    );\n  }\n\n  private async _getContainerIdV1(): Promise<string | undefined> {\n    const rawData = await ContainerDetector.readFileAsync(\n      this.DEFAULT_CGROUP_V1_PATH,\n      this.UTF8_UNICODE\n    );\n    const splitData = rawData.trim().split('\\n');\n\n    for (const line of splitData) {\n      const containerID = extractContainerIdFromLine(line);\n      if (containerID) {\n        return containerID;\n      }\n    }\n    return undefined;\n  }\n\n  private async _getContainerIdV2() {\n    const rawData = await ContainerDetector.readFileAsync(\n      this.DEFAULT_CGROUP_V2_PATH,\n      this.UTF8_UNICODE\n    );\n    const str = rawData\n      .trim()\n      .split('\\n')\n      .find(s => s.includes(this.HOSTNAME));\n\n    if (!str) return '';\n\n    const strArray = str?.split('/') ?? [];\n    for (let i = 0; i < strArray.length - 1; i++) {\n      if (\n        this.MARKING_PREFIX.includes(strArray[i]) &&\n        strArray[i + 1]?.length === this.CONTAINER_ID_LENGTH\n      ) {\n        return strArray[i + 1];\n      }\n    }\n    return '';\n  }\n\n  /*\n    cgroupv1 path would still exist in case of container running on v2\n    but the cgroupv1 path would no longer have the container id and would\n    fallback on the cgroupv2 implementation.\n  */\n  private async _getContainerId(): Promise<string | undefined> {\n    try {\n      const containerIdV1 = await this._getContainerIdV1();\n      if (containerIdV1) {\n        return containerIdV1; // If containerIdV1 is a non-empty string, return it.\n      }\n      const containerIdV2 = await this._getContainerIdV2();\n      if (containerIdV2) {\n        return containerIdV2; // If containerIdV2 is a non-empty string, return it.\n      }\n    } catch (e) {\n      if (e instanceof Error) {\n        const errorMessage = e.message;\n        diag.debug(\n          'Container Detector failed to read the Container ID: ',\n          errorMessage\n        );\n      }\n    }\n    return undefined; // Explicitly return undefined if neither ID is found.\n  }\n}\n\nexport const containerDetector = new ContainerDetector();\n"]}